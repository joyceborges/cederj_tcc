import torch
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
from utils.model_train import Net

# TODO: Automatizar selecao de modelo
model_name = "models/0-model-torch/mnist_cnn.pt"

model = Net()
model.load_state_dict(torch.load(model_name))
model.eval()  # TODO: Remover eval

# Configura (CPU/GPU)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)


transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.1307,), (0.3081,))
])

test_dataset = datasets.MNIST('../data', train=False, download=True, transform=transform)
test_loader = DataLoader(test_dataset, batch_size=1000, shuffle=False)

# Função para dar o predict
def predict(model, device, data_loader):
    model.eval()
    predictions = []
    with torch.no_grad():
        for data, _ in data_loader:
            data = data.to(device)
            output = model(data)
            pred = output.argmax(dim=1, keepdim=True)
            predictions.extend(pred.cpu().numpy())
    return predictions

predictions = predict(model, device, test_loader)

print("Predict:", predictions[:100])